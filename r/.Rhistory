labs(title="USA Murder") -> gg_map
ggiraph(code = print(gg_map))
girafe(ggobj = gg_map)
onclick = paste0('location.href=', sprintf('"http://en.wikipedia.org/wiki/%s"', as.character(chodata$state)))
ggplot(chodata, aes(map_id = state)) +
geom_map_interactive(
aes(fill = Rape,
data_id = state,
tooltip = tooltips,
onclick = onclick),
map = usmap) +
expand_limits(x = usmap$long, y = usmap$lat) +
scale_fill_gradient2('Rape', high = "blue", mid = "green") +
labs(title="USA Murder") -> gg_map
ggiraph(code = print(gg_map))
girafe(ggobj = gg_map)
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1,
interactive = T)
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1)
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1)
ggplot(kdata, aes(data = pop, map_id = code)) +
geom_map( aes(fill = pop), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('인구', low='darkblue')
ggplot(kdata, aes(data = pop, map_id = code)) +
geom_map( aes(fill = pop), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('인구', low='brown')
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1)
ggplot(kdata, aes(data = pop, map_id = code)) +
geom_map( aes(fill = pop), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('인구', low='brown')
brown
ggplot(kdata, aes(data = pop, map_id = code)) +
geom_map( aes(fill = pop), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('인구', high='brown')
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1)
kdata
ggplot(kdata1, aes(map_id = code)) +
geom_map( aes(fill = pop), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('인구', high='brown')
ggplot(kdata1, aes(map_id = code)) +
geom_map( aes(fill = NewPts), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('인구', high='brown')
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1)
ggplot(kdata1, aes(data=NewPts, map_id = code)) +
geom_map( aes(fill = NewPts), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('인구', high='brown')
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1)
ggplot(kdata1, aes(data=NewPts, map_id = code)) +
geom_map( aes(fill = NewPts), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('NewPts', high='brown')
ggplot(kdata1, aes(data=NewPts, map_id = code)) +
geom_map( aes(fill = NewPts), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('NewPts', high='red')
ggplot(chodata, aes(map_id = state)) +
geom_map(aes(fill = Murder), map = usmap) +
expand_limits(x = usmap$long, y = usmap$lat) +
labs(title="USA Murder", fill = 'Rape')
year = c(2010, 2011, 2012, 2013)
cost = c(27145, 25455, 20723, 19054)
sale = c(41678, 44980, 57653, 73286)
plot(cost ~ year, type = "l")
plot(sale ~ year, type = "l", col = "red")
prePar = par(new = TRUE)
plot(cost ~ year, type = "l")
par = prePar
par() = prePar
plot(cost ~ year, type = "l")
plot(sale ~ year, type = "l", col = "red")
plot(cost ~ year, type = "l")
?mtext
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name) %>% summarise(NewPts = sum(NewPts),code = mean(code))
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name) %>% summarise(NewPts = sum(NewPts),code = mean(code))
kdata1
kdata1 = kormaps2014::tbc
kdata1[kdata1$code==29,]
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name) %>% summarise(NewPts = sum(NewPts),code = mean(code))
kdata1 %>% filter(year %in% c(2006:2015))
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(code) %>% summarise(NewPts = sum(NewPts),code = mean(code))
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name1) %>% summarise(NewPts = sum(NewPts),code = mean(code))
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name1) %>% summarise(NewPts = sum(NewPts)
)
data1 %>% filter(year %in% c(2006:2015)) %>% group_by(name1)
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name1)
kdata1 %>% filter(year %in% c(2006:2015) & name==세종특별자치시) %>% group_by(name1)
kdata1 %>% filter(year %in% c(2006:2015) & name==세종특별자치시)
kdata1 %>% filter(year %in% c(2006:2015) & name=="세종특별자치시")
kdata1 %>% filter(year %in% c(2006:2015) & name=="세종특별자치시") %>% group_by(code) %>% summarise(l=sum(NewPts))
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(code) %>% summarise(l=sum(NewPts))
kdata1$NewPts = ifelse(is.na(kdata1$NewPts), 0, kdata1$NewPts)
kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(code) %>% summarise(l=sum(NewPts))
kdata1 = kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name) %>% summarise(NewPts = sum(NewPts), code = mean(code))
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1)
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1,
interactive = TRUE)
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1, interactive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tibble)
library(ggiraphExtra)
library(ggiraph)
library(stringi)
library(kormaps2014)
kdata1 = kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name) %>% summarise(총결핵발생자 = sum(NewPts), code = mean(code))
kdata1 = kormaps2014::tbc
kdata1[kdata1$code==29,]
colnames(kdata1)
kdata1$NewPts = ifelse(is.na(kdata1$NewPts), 0, kdata1$NewPts)
kdata1 = kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name) %>% summarise(총결핵발생자 = sum(NewPts), code = mean(code))
ggChoropleth(data=kdata1,
aes(fill = NewPts,
map_id = code,
tooltip = area),
map = kormap1)
ggChoropleth(data=kdata1,
aes(fill = 총결핵발생자,
map_id = code,
tooltip = area),
map = kormap1)
kdata1 = kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name) %>% summarise(총결핵발생자 = sum(NewPts), code = mean(code))
kdata1 = kormaps2014::tbc
kdata1$NewPts = ifelse(is.na(kdata1$NewPts), 0, kdata1$NewPts)
kdata1 = kdata1 %>% filter(year %in% c(2006:2015)) %>% group_by(name) %>% summarise(총결핵발생자 = sum(NewPts), code = mean(code))
ggChoropleth(data=kdata1,
aes(fill = 총결핵발생자,
map_id = code,
tooltip = area),
map = kormap1)
ggChoropleth(data=kdata1,
aes(fill = 총결핵발생자,
map_id = code,
tooltip = area),
map = kormap1, interactive = TRUE)
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map( aes(fill = 총결핵발생자), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2('NewPts', high='red')
ggChoropleth(data=kdata1,
aes(fill = 총결핵발생자,
map_id = code,
tooltip = area),
map = kormap1, interactive = TRUE)
tooltips = paste0(
sprintf("<p><strong>%s</strong></p>", as.character(kdata1$name)),
sprintf("<p><strong>%.0f</strong> 명</p>", round(kdata1$총결핵발생자)))
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tootip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2(총결핵발생자, high='red')
ggplot(kdata1, aes(data=kdata1, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tootip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2(총결핵발생자, high='red')
kdata1
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = "총결핵발생자",
data_id = code,
tootip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2(총결핵발생자, high='red')
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tootip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2(총결핵발생자, high='red')
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tootip =tooltips), map = kormap1)
tooltips = paste0(
sprintf("<p><strong>%s</strong></p>", as.character(kdata1$name)),
sprintf("<p><strong>%.0f</strong> 명</p>", round(kdata1$총결핵발생자)))
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tootip =tooltips), map = kormap1)
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tooltip =tooltips), map = kormap1)
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tooltip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat)
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tooltip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2(총결핵발생자, high='red')
aes(fill = Rape,
data_id = state,
tooltip = tooltips,
onclick = onclick),
map = usmap) +
expand_limits(x = usmap$long, y = usmap$lat) +
scale_fill_gradient2('Rape', high = "blue", mid = "green") +
labs(title="USA Murder") -> gg_map
aes(fill = Rape,
data_id = state,
tooltip = tooltips,
onclick = onclick),
map = usmap) +
expand_limits(x = usmap$long, y = usmap$lat) +
scale_fill_gradient2('Rape', high = "blue", mid = "green") +
labs(title="USA Murder") -> gg_map
ggplot(chodata, aes(map_id = state)) +
geom_map_interactive(
aes(fill = Rape,
data_id = state,
tooltip = tooltips,
onclick = onclick),
map = usmap) +
expand_limits(x = usmap$long, y = usmap$lat) +
scale_fill_gradient2('Rape', high = "blue", mid = "green") +
labs(title="USA Murder") -> gg_map
ggplot(chodata, aes(map_id = state)) +
geom_map_interactive(
aes(fill = Rape,
data_id = state,
tooltip = tooltips,
onclick = onclick),
map = usmap) +
expand_limits(x = usmap$long, y = usmap$lat) +
scale_fill_gradient2('Rape', high = "blue", mid = "green") +
labs(title="USA Murder")
tooltips = paste0(
sprintf("<p><strong>%s</strong></p>", as.character(chodata$state)),
sprintf("<p><strong>%s</strong> / %.0f 만</p>", round(chodata$Rape), round(chodata$UrbanPop) * 10))
gg_map
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tooltip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2("총결핵발생자", high='red')
tooltips = paste0(
sprintf("<p><strong>%s</strong></p>", as.character(kdata1$name)),
sprintf("<p><strong>%.0f</strong> 명</p>", round(kdata1$총결핵발생자)))
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tooltip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2("총결핵발생자", high='red')
ggplot(kdata1, aes(data=총결핵발생자, map_id = code)) +
geom_map_interactive(aes(fill = 총결핵발생자,
data_id = code,
tooltip =tooltips), map = kormap1) +
expand_limits(x = kormap1$long, y = kormap1$lat) +
scale_fill_gradient2("총결핵발생자", high='red') +
labs(title="시도별 결핵환자수", subtitle = "(2006~2015년 총 발생 건수") -> gg_map1
ggiraph(code = print(gg_map1))
girafe(ggobj = gg_map1)
ggChoropleth(data=kdata1,
aes(fill = 총결핵발생자,
map_id = code,
tooltip = name),
map = kormap1, interactive = TRUE)
ggChoropleth(data=kdata1,
aes(fill = 총결핵발생자,
map_id = code,
tooltip = name),
map = kormap1, interactive = TRUE)
ggChoropleth(data=kdata1,
aes(fill = 총결핵발생자,
map_id = code,
tooltip = name),
map = kormap1, interactive = TRUE)
data = read.csv("../data/성적.csv")
getwd()
data = read.csv("./data/성적.csv")
head(data)
data %>% filter(수학 >= 90)
library(ggplot)
library(ggplot2)
data %>% filter(수학 >= 90)
library(dplyr)
data %>% filter(수학 >= 90)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data %>% filter(국어 >= 80) %>% select(반, 성별), aes(반)) +
geom_bar(aes(fill=성별),
width = 0.5) +
theme(axis.text.x = element_text(angle=45,       # 글씨의 기울기
vjust=0.6)) +   # 글씨의 하단 맞춤(띄우기)
scale_fill_discrete(name = "성별") +      # legend
labs(title = '국어 우수 학생', subtitle = '(80점 이상)', x='학급', y='학생수')
ggplot(data %>% filter(국어 >= 95), aes(국어)) +
geom_density(aes(fill=factor(반)), alpha=0.5) +
labs(title="반별 국어 우수 성적", subtitle = "(국어 성적 A+)",
caption="기준 점수 >= 95",
x = "성적",
y = '밀도',
fill = "학급")
?geom_point()
?r
??r
?geom_line()
?geom_boxplot()
ggplot(mpg, aes(class, hwy))+geom_boxplot(fill = "white", colour = "#3366FF")
plot(mpg$class, mpg$hwy)
plot(mpg$class, mpg$hwy, xlim = class)
?boxplot()
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
ggplot(mpg, aes(class, hwy))+geom_boxplot(fill = "white", colour = "#3366FF")
?geom_histogram()
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 0.01)?geom_histogram()
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 0.01)
ggplot(diamonds, aes(carat)) +  geom_histogram(bins = 200)
?geom_bar()
ggplot(mpg, aes(class)) + geom_bar(aes(fill = drv))?geom_bar()
ggplot(mpg, aes(class)) + geom_bar(aes(fill = drv))
ggplot(mpg, aes(manufacturer)) +
geom_bar(aes(fill=class),width = 0.5) +
theme(axis.text.x = element_text(angle=45, vjust=0.6)) +
scale_fill_discrete(name = "class") +
labs(title = 'Title', subtitle = 'Sub Title')
?geom_bar()
?geom_density()
data %>% filter(국어 >= 80)
install.packages('tm')
library(tm)
getSources()
getReaders()
folder = system.file("texts", "txt", package="tm")
txtSource = DirSource(folder)   # dir 경로로 Corpus 생성
class(txtSource); str(txtSource)
doc = VCorpus(txtSource, readerControl = list(language='lat'))
class(doc); summary(doc)
meta(doc)
meta(doc, type = 'local')
inspect(doc)
inspect(doc[1])
doc[[1]]
writeCorpus(doc, path="data", filenames = names(doc))
getTransformations()
doc = tm_map(doc, stripWhitespace)
data("crude")
crude[[1]]
crude[[1]][1]
crude = tm_map(crude, content_transformer(tolower))
crude = tm_map(crude, removePunctuation)
crude = tm_map(crude, removeWords, stopwords("english"))
crude = tm_map(crude, stripWhitespace)
crude = tm_map(crude, stemDocument, language="english")
install.packages(SnowballC)
install.packages("SnowballC")
library("SnowballC")
crude = tm_map(crude, stemDocument, language="english")
crude
crude[[1]][1]
tdm = TermDocumentMatrix(crude)
tdm = removeSparseTerms(tdm, 0.8)
rowSums(as.matrix(tdm))
wFreq = sort(rowSums(as.matrix(tdm)), decreasing = T)
wFreq = subset(wFreq, wFreq > 10)   # 빈도수 10회 초과 단어들만!
wFreq
install.packages('RColorBrewer')
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
darks = brewer.pal(8, 'Dark2')
wordcloud(words = names(wFreq), freq=wFreq, min.freq = 10,
random.order = F, colors = darks)
doc_converted = tm_map(doc, content_transformer(tolower))
doc_converted = tm_map(doc_converted, removePunctuation)
doc_converted = tm_map(doc_converted, removeWords, stopwords("latin"))
doc_converted = tm_map(doc_converted, stripWhitespace)
doc_converted = tm_map(doc_converted, stemDocument, language="latin")
tdm_latin = TermDocumentMatrix(doc_converted)
tdm_latin = removeSparseTerms(tdm_latin, 0.8)
rowSums(as.matrix(tdm_latin))
wFreq_latin = sort(rowSums(as.matrix(tdm_latin)), decreasing = T)
wFreq_latin = subset(wFreq_latin, wFreq_latin > 10)
wFreq_latin
darks = brewer.pal(8, 'Dark2')
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 10,
random.order = F, colors = darks)
doc = VCorpus(txtSource, readerControl = list(language='lat'))
doc_converted = tm_map(doc, content_transformer(tolower))
doc_converted = tm_map(doc_converted, removePunctuation)
doc_converted = tm_map(doc_converted, removeWords, stopwords("latin"))
doc_converted
doc_converted[1][1]
doc_converted[[1]][1]
doc_converted = tm_map(doc_converted, stripWhitespace)
doc_converted[[1]][1]
stopwords("latin")
?stopwords
doc_converted = tm_map(doc_converted, removeWords, stopwords("romanian"))
doc_converted = tm_map(doc_converted, stripWhitespace)
doc_converted[[1]][1]
doc_converted = tm_map(doc_converted, stemDocument, language="romanian")
tdm_latin = TermDocumentMatrix(doc_converted)
tdm_latin = removeSparseTerms(tdm_latin, 0.8)
rowSums(as.matrix(tdm_latin))
wFreq_latin = sort(rowSums(as.matrix(tdm_latin)), decreasing = T)
wFreq_latin = subset(wFreq_latin, wFreq_latin > 10)
wFreq_latin
darks = brewer.pal(8, 'Dark2')
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 10,
random.order = F, colors = darks)
names(wFreq_latin)
wFreq_latin
doc = VCorpus(txtSource, readerControl = list(language='lat'))
doc_converted = tm_map(doc, content_transformer(tolower))
doc_converted = tm_map(doc_converted, removePunctuation)
doc_converted = tm_map(doc_converted, stripWhitespace)
doc_converted = tm_map(doc_converted, stemDocument, language="romanian")
doc_converted[[1]][1]
tdm_latin = TermDocumentMatrix(doc_converted)
tdm_latin = removeSparseTerms(tdm_latin, 0.8)
tdm_latin
rowSums(as.matrix(tdm_latin))
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 10,
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 0,
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin,
random.order = F, colors = darks)
wFreq_latin
rowSums(as.matrix(tdm_latin))
wFreq_latin = sort(rowSums(as.matrix(tdm_latin)), decreasing = T)
# wFreq_latin = subset(wFreq_latin, wFreq_latin > 10)
wFreq_latin
wordcloud(words = names(wFreq_latin), freq=wFreq_latin,
random.order = F, colors = darks)
wFreq_latin = subset(wFreq_latin, wFreq_latin > 1)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 1,
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 3,
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 5,
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 10,
random.order = F, colors = darks)
min.freq
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 1,
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 1, scale=c(5,1)
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 1, scale=c(5,1),
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 1, scale=c(3,1),
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 1, scale=c(3,0.5),
random.order = F, colors = darks)
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 1, scale=c(2.5,0.5),
random.order = F, colors = darks)
warnings()
wordcloud(words = names(wFreq_latin), freq=wFreq_latin, min.freq = 1, scale=c(2.5,0.5), rot.per = 1,
random.order = F, colors = darks)
